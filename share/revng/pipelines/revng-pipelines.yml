#
# This file is distributed under the MIT License. See LICENSE.md for details.
#

Component: revng
Containers:
  - Name: hex.dump
    Type: hex-dump
  - Name: cross-relations.yml
    Type: binary-cross-relations
    Role: cross-relations
  - Name: module.bc.zstd
    Type: llvm-container
  - Name: input
    Type: binary
  - Name: object.o
    Type: object
  - Name: output
    Type: translated
  - Name: assembly-internal.yml.tar.gz
    Type: function-assembly-internal
  - Name: assembly.ptml.tar.gz
    Type: function-assembly-ptml
  - Name: call-graph.svg.yml
    Type: call-graph-svg
  - Name: call-graph-slice.svg.tar.gz
    Type: call-graph-slice-svg
  - Name: cfg.svg.tar.gz
    Type: function-control-flow-graph-svg
  - Name: cfg.yml.tar.gz
    Type: cfg
  - Name: types-and-globals.h
    Type: model-header
  - Name: helpers.h
    Type: helpers-header
  - Name: decompiled.c
    Type: decompiled-c-code
  - Name: decompiled.tar.gz
    Type: decompile
  - Name: recompilable-archive.tar.gz
    Type: recompilable-archive
  - Name: module.mlir
    Type: mlir-module
  - Name: model-type-definitions.tar.gz
    Type: model-type-definitions
Branches:
  - Steps:
      - Name: initial
        Analyses:
          - Name: apply-diff
            Type: apply-diff
            UsedContainers: []
          - Name: verify-diff
            Type: verify-diff
            UsedContainers: []
          - Name: set-global
            Type: set-global
            UsedContainers: []
          - Name: verify-global
            Type: verify-global
            UsedContainers: []
          - Name: import-binary
            Type: import-binary
            UsedContainers: [input]
          - Name: import-well-known-models
            Type: import-well-known-models
            UsedContainers: []
          - Name: convert-functions-to-cabi
            Type: convert-functions-to-cabi
            UsedContainers: []
      - Name: lift
        Pipes:
          - Type: lift
            UsedContainers: [input, module.bc.zstd]
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes: [globaldce]
        Artifacts:
          Container: module.bc.zstd
          Kind: root
          SingleTargetFilename: module_lifted.ll
        Analyses:
          - Name: detect-abi
            Type: detect-abi
            UsedContainers: [module.bc.zstd]
      - Name: isolate
        Pipes:
          - Type: collect-cfg
            UsedContainers: [module.bc.zstd, cfg.yml.tar.gz]
          - Type: isolate
            UsedContainers: [cfg.yml.tar.gz, module.bc.zstd]
          - Type: attach-debug-info-to-isolated
            UsedContainers: [cfg.yml.tar.gz, module.bc.zstd]
          - Type: process-call-graph
            UsedContainers: [cfg.yml.tar.gz, cross-relations.yml]
        Artifacts:
          Container: module.bc.zstd
          Kind: isolated
          SingleTargetFilename: module_isolated.ll
      - Name: enforce-abi
        Pipes:
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes:
              - drop-root
          - Type: enforce-abi
            UsedContainers: [cfg.yml.tar.gz, module.bc.zstd]
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes:
              - strip-debug-info-from-helpers
              # Note: we're running promote-csvs twice: it is important to run
              #       it before inline-helpers so that mem2reg can constant
              #       propagate helper arguments that are constant. This enables
              #       us to inline less code, in particular for helpers such as
              #       `cc_compute_c` and `cc_compute_all`.
              - promote-csvs
              - mem2reg
              - inline-helpers
          - Type: attach-debug-info-to-abi-enforced
            UsedContainers: [cfg.yml.tar.gz, module.bc.zstd]
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes:
              - promote-csvs
              - remove-exceptional-functions

        Artifacts:
          Container: module.bc.zstd
          Kind: csvs-promoted
          SingleTargetFilename: module_abienforced.ll
  - From: isolate
    Steps:
      - Name: emit-cfg
        Pipes: []
        Artifacts:
          Container: cfg.yml.tar.gz
          Kind: cfg
          SingleTargetFilename: cfg.yml.tar.gz
  - From: isolate
    Steps:
      - Name: hexdump
        Pipes:
          - Type: hex-dump
            UsedContainers: [input, module.bc.zstd, cfg.yml.tar.gz, hex.dump]
        Artifacts:
          Container: hex.dump
          Kind: hex-dump
          SingleTargetFilename: hex_dump.hex
  - From: isolate
    Steps:
      - Name: render-svg-call-graph
        Pipes:
          - Type: yield-call-graph
            UsedContainers: [cross-relations.yml, call-graph.svg.yml]
        Artifacts:
          Container: call-graph.svg.yml
          Kind: call-graph-svg
          SingleTargetFilename: call-graph.svg
  - From: isolate
    Steps:
      - Name: render-svg-call-graph-slice
        Pipes:
          - Type: yield-call-graph-slice
            UsedContainers: [cfg.yml.tar.gz, cross-relations.yml, call-graph-slice.svg.tar.gz]
        Artifacts:
          Container: call-graph-slice.svg.tar.gz
          Kind: call-graph-slice-svg
          SingleTargetFilename: call-graph-slice.svg
  - From: isolate
    Steps:
      - Name: process-assembly
        Pipes:
          - Type: process-assembly
            UsedContainers: [input, cfg.yml.tar.gz, assembly-internal.yml.tar.gz]
      - Name: disassemble
        Pipes:
          - Type: yield-assembly
            UsedContainers: [assembly-internal.yml.tar.gz, assembly.ptml.tar.gz]
        Artifacts:
          Container: assembly.ptml.tar.gz
          Kind: function-assembly-ptml
          SingleTargetFilename: disassembly.S
  - From: process-assembly
    Steps:
      - Name: render-svg-cfg
        Pipes:
          - Type: yield-cfg
            UsedContainers: [assembly-internal.yml.tar.gz, cfg.svg.tar.gz]
        Artifacts:
          Container: cfg.svg.tar.gz
          Kind: function-control-flow-graph-svg
          SingleTargetFilename: cfg.svg
  - From: lift
    Steps:
      - Name: recompile
        Pipes:
          - Type: link-support
            UsedContainers: [module.bc.zstd]
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes: [O2]
            EnabledWhen: [O2]
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes: [drop-opaque-return-address]
          - Type: compile
            UsedContainers: [module.bc.zstd, object.o]
          - Type: link-for-translation
            UsedContainers: [input, object.o, output]
        Artifacts:
          Container: output
          Kind: translated
          SingleTargetFilename: translated-binary
  - From: isolate
    Steps:
      - Name: recompile-isolated
        Pipes:
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes: [invoke-isolated-functions]
          - Type: link-support
            UsedContainers: [module.bc.zstd]
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes: [O2]
            EnabledWhen: [O2]
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes: [drop-opaque-return-address]
          - Type: compile-isolated
            UsedContainers: [module.bc.zstd, object.o]
          - Type: link-for-translation
            UsedContainers: [input, object.o, output]
        Artifacts:
          Container: output
          Kind: translated
          SingleTargetFilename: isolated-translated-binary
  - From: enforce-abi
    Steps:
      - Name: remove-lifting-artifacts
        Pipes:
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes:
              - dce
              - remove-lifting-artifacts
              - promote-init-csv-to-undef
      - Name: promote-stack-pointer
        Pipes:
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes:
              - measure-stack-size-at-call-sites
              - promote-stack-pointer
      - Name: early-optimize
        Pipes:
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes:
              - dce
              - remove-extractvalues
              - simplify-cfg-with-hoist-and-sink
              - dse
              - instcombine
              - remove-extractvalues
              - sroa
              - instsimplify
              - jump-threading
              - licm
              - unreachableblockelim
              - instcombine
              - remove-extractvalues
              - early-cse
              - simplify-cfg-with-hoist-and-sink
              - early-type-shrinking
              - type-shrinking
              - early-cse
              - instsimplify
              - gvn
              - instsimplify
              - dse
              - dce
              # In Outliner we inject some store of opaque values before calls
              # targeting the link register/top of the stack: the goal is make
              # sure the stores writing the return address are dead.
              # After the previous optimization pipeline, dead store elimination
              # should have removed such stores, therefore, we can now drop
              # those injected by us too.
              - drop-opaque-return-address
      - Name: simplify-switch
        Pipes:
          - Type: simplify-switch
            UsedContainers: [input, module.bc.zstd]
        Artifacts:
          Container: module.bc.zstd
          Kind: stack-pointer-promoted
          SingleTargetFilename: simplify-switch.ll
      - Name: detect-stack-size
        Pipes:
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes:
              - remove-stack-alignment
              - instrument-stack-accesses
              - instcombine
              - remove-extractvalues
              - loop-rotate
              - loop-simplify
              - compute-stack-accesses-bounds
        Analyses:
          - Name: detect-stack-size
            Type: detect-stack-size
            UsedContainers: [module.bc.zstd]
      - Name: segregate-stack-accesses
        Pipes:
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes:
              - hoist-struct-phis
              - segregate-stack-accesses
      - Name: late-optimize
        Pipes:
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes:
              - cleanup-stack-size-markers
              - dce
              - sroa
              - instcombine
              - remove-extractvalues
              - sroa
              - simplify-cfg-with-hoist-and-sink
              # loop-rotate rearranges loops in a way that should make it
              # easier to match do-while loops
              - loop-rotate
              - loop-rewrite-with-canonical-induction-variable
              - simplify-cfg-with-hoist-and-sink
              # don't run simplify-cfg{,-with-hoist-and-sink} after
              # loop-simplify because it kills the loop-simplify form causing
              # DLA not to identify arrays properly
              - loop-simplify
              - instcombine
              - remove-extractvalues
              - early-cse
              - dce
              - strip-dead-prototypes
              - split-overflow-intrinsics
              - dce
      - Name: make-segment-ref
        Pipes:
          - Type: make-segment-ref
            UsedContainers: [input, module.bc.zstd]
        Artifacts:
          Container: module.bc.zstd
          Kind: stack-accesses-segregated
          SingleTargetFilename: stack_access_segregate.ll
        Analyses:
          - Name: analyze-data-layout
            Type: analyze-data-layout
            UsedContainers: [module.bc.zstd]
      - Name: canonicalize
        Pipes:
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes:
              - hoist-struct-phis
              - remove-llvmassume-calls
              - dce
              - remove-pointer-casts
              - make-model-gep
              - dce
              - twoscomplement-normalization
              - peephole-opt-for-decompilation
              - ternary-reduction
              - exit-ssa
              - make-local-variables
              - remove-load-store
              - fold-model-gep
              - dce
              - switch-to-statements
              - make-model-cast
              - implicit-model-cast
              - operatorprecedence-resolution
              - pretty-int-formatting
              - remove-broken-debug-information
      - Name: decompile
        Pipes:
          - Type: helpers-to-header
            UsedContainers: [module.bc.zstd, helpers.h]
          - Type: model-to-header
            UsedContainers: [input, types-and-globals.h]
          - Type: decompile
            UsedContainers: [module.bc.zstd, cfg.yml.tar.gz, decompiled.tar.gz]
        Artifacts:
          Container: decompiled.tar.gz
          Kind: decompiled
          SingleTargetFilename: decompiled.c
        Analyses:
          - Name: import-from-c
            Type: import-from-c
            UsedContainers: []
      - Name: decompile-to-single-file
        Pipes:
          - Type: decompile-to-single-file
            UsedContainers: [decompiled.tar.gz, decompiled.c]
        Artifacts:
          Container: decompiled.c
          Kind: decompiled-to-c
          SingleTargetFilename: binary_decompiled.c
  - From: canonicalize
    Steps:
      - Name: emit-recompilable-archive
        Pipes:
          - Type: decompile-to-directory
            UsedContainers: [module.bc.zstd, cfg.yml.tar.gz, recompilable-archive.tar.gz]
        Artifacts:
          Container: recompilable-archive.tar.gz
          Kind: recompilable-archive
          SingleTargetFilename: recompilable-archive.tar.gz
  - From: canonicalize
    Steps:
      - Name: emit-helpers-header
        Pipes:
          - Type: helpers-to-header
            UsedContainers: [module.bc.zstd, helpers.h]
        Artifacts:
          Container: helpers.h
          Kind: helpers-header
          SingleTargetFilename: helpers.h
  - From: initial
    Steps:
      - Name: emit-model-header
        Pipes:
          - Type: model-to-header
            UsedContainers: [input, types-and-globals.h]
        Artifacts:
          Container: types-and-globals.h
          Kind: model-header
          SingleTargetFilename: types-and-globals.h
  - From: canonicalize
    Steps:
      - Name: emit-type-definitions
        Pipes:
          - Type: generate-model-type-definition
            UsedContainers: [input, model-type-definitions.tar.gz]
        Artifacts:
          Container: model-type-definitions.tar.gz
          Kind: model-type-definition
          SingleTargetFilename: type.h
  - From: make-segment-ref
    Steps:
      - Name: cleanup-ir
        Pipes:
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes:
              - instcombine
              - cleanup-ir
              - dce
        Artifacts:
          Container: module.bc.zstd
          Kind: stack-accesses-segregated
          SingleTargetFilename: stack_access_segregate.ll
  - From: make-segment-ref
    Steps:
      - Name: convert-to-mlir
        Pipes:
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes:
              - prepare-llvmir-for-mlir
          - Type: import-llvm-to-mlir
            UsedContainers: [module.bc.zstd, module.mlir]
        Artifacts:
          Container: module.mlir
          Kind: mlir-module
          SingleTargetFilename: mlir-llvm-dialect.mlir
      - Name: import-clift-types
        Pipes:
          - Type: import-clift-types
            UsedContainers: [cfg.yml.tar.gz, module.mlir]
        Artifacts:
          Container: module.mlir
          Kind: mlir-module
          SingleTargetFilename: mlir-llvm-dialect-with-clift-types.mlir
AnalysesLists:
  - Name: revng-initial-auto-analysis
    Analyses:
      - import-binary
      - import-well-known-models
      - detect-abi
      - detect-stack-size
      - analyze-data-layout
      - convert-functions-to-cabi
